variables:
   # registry.datnxdevops.site/gitlab-cicd/springboot:staging_1234
    DOCKER_IMAGE: ${REGISTRY_URL}/${REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}
    USER: fullstack
    FOLDER_DEPLOY: /gitlab-deploy/
stages:
  - build
  - print_notification
  - release
  - deploy
  - showlog

build_image:
  stage: build
  variables:
    GIT_STRATEGY: clone
  tags:
    - gitlab-runner
  only:
    - tags
  script:
    - |
      if [[ "$CI_COMMIT_REF_NAME" =~ ^staging_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        docker build -t ${DOCKER_IMAGE} . > build.log 2>&1 || echo "Build failed"
      else
        echo "Don't have to build again"
        exit 0
      fi
  artifacts:
    paths:
      - build.log

build_noti:
  stage: print_notification
  only:
    - tags
  script:
    - if [ ! -f "build.log" ]; then
        echo "Build log not found. Skipping stage.";
        exit 0;
      fi
    - build_content=$(cat build.log)
    - |
      project_info=$(cat <<EOF
      ===Notification from the system===
      Project ID: $CI_PROJECT_ID
      Project name: $CI_PROJECT_NAME
      Project URL: $CI_PROJECT_URL
      Branch: $CI_COMMIT_REF_NAME
      Commit: $CI_COMMIT_SHA
      EOF
      )
    - message="$build_content\n\n$project_info"
    - echo "$build_content"
    - if grep -q "ERROR" build.log; then 
        curl -X POST "https://api.telegram.org/bot${TOKEN_BOTFATHER}/sendMessage" -d "chat_id=$CHAT_ID&text=$message"; 
        exit 1; 
      else
        curl -X POST "https://api.telegram.org/bot${TOKEN_BOTFATHER}/sendMessage" -d "chat_id=$CHAT_ID&text=Build Springboot Success!";
      fi
  tags:
    - gitlab-runner



release:
  stage: release
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login $REGISTRY_URL -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script:
    - |
      if [[ "$CI_COMMIT_REF_NAME" =~ ^staging_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        echo "Release Docker image for staging environment..."
        docker push $DOCKER_IMAGE
        docker tag $DOCKER_IMAGE $REGISTRY_URL/$REGISTRY_PROJECT/$CI_PROJECT_NAME:staging_latest &&
        docker push $REGISTRY_URL/$REGISTRY_PROJECT/$CI_PROJECT_NAME:staging_latest

      elif [[ "$CI_COMMIT_REF_NAME" =~ ^master_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
        echo "Release Docker image for production environment..."

        docker pull $REGISTRY_URL/$REGISTRY_PROJECT/$CI_PROJECT_NAME:staging_latest &&
        docker tag $REGISTRY_URL/$REGISTRY_PROJECT/$CI_PROJECT_NAME:staging_latest $DOCKER_IMAGE &&
        docker push $DOCKER_IMAGE
      
      else
        echo "Invalid branch ($CI_COMMIT_REF_NAME) for building Docker image"
        exit 1
      fi
  tags:
    - gitlab-runner
  only:
    - tags

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  when: manual
  before_script:
    - docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
  script:
    - >
      if [ "$GITLAB_USER_LOGIN" == 'DatNX' ]; then
        
        if [[ "$CI_COMMIT_REF_NAME" =~ ^staging_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          SSH_SERVER="${SERVER_STAGING}"
          SERVER_TAG="staging"
        elif [[ "$CI_COMMIT_REF_NAME" =~ ^master_([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          SSH_SERVER="${SERVER_PRODUCTION}"
          SERVER_TAG="production"
        else
          echo "Invalid branch or tag for deployment"
          exit 1
        fi
        ssh datnx@${SSH_SERVER} "
          sudo chown -R fullstack. ${FOLDER_DEPLOY} &&
          cd ${FOLDER_DEPLOY} &&
          docker compose down &&
          docker image rm -f ${REGISTRY_URL}/${REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${SERVER_TAG} &&
          docker pull ${DOCKER_IMAGE} &&
          docker tag ${DOCKER_IMAGE}  ${REGISTRY_URL}/${REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${SERVER_TAG} &&
          docker image rm -f ${DOCKER_IMAGE} &&
          docker compose up -d "
      else
        echo "Permission denied for deployment"
        exit 1
      fi
  tags:
    - gitlab-runner
  only:
    - tags


showlog:
  stage: showlog
  variables:
    GIT_STRATEGY: none
  when: manual
  script:
    - sleep 10s 
    - docker ps 
  tags:
    - gitlab-runner
  only:
    - tags
